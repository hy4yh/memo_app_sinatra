c
request.path_infoc
request.path_info
c
request.env["REQUEST_METHOD"]
request.env[:REQUEST_METHOD]
request.env
request.ENV
request.method.REQUEST_METHOD
request.method.request_method
request.method
request.url
request
c
memo_hash[:title]
memo_hash = {uuid: params[:uuid], title: memo_title, content: memo_content}
memo_title
memo_hash
c
memo_hash
c
memo_content
memo_title
c
memo_title
c
params[:memo_contents].lines[1]c
params[:memo_contents].lines[1]
params[:memo_contents].lines[0]
params[:memo_contents]
memo_title
c
params[:memo_contents].lines[1..-1].join
params[:memo_contents].lines[1..-1]
params[:memo_contents]
params
memo_title
c
nil.gsub(/^[[:space:]]+/, '').empty?
memo_content = params[:memo_contents].lines[1..-1].join
params[:memo_contents].lines[0]
memo_title = params[:memo_contents].lines[0]
params
memo_title = params[:memo_contents].lines[0]
memo_title
c
memo_hash[:content].encode(universal_newline: true).encode(universal_newline: true)
memo_hash[:content].encode(universal_newline: true)
memo_hash[:content]
memo_hash
c
array << [row[0], memo_hash[:title].encode(universal_newline: true), memo_hash[:content].encode(universal_newline: true)]
array << [row[0],row[1],row[2]]
[row[0], memo_hash[:title].encode(universal_newline: true), memo_hash[:content].encode(universal_newline: true)]
[row[0],row[1],row[2]]
ode(universal_newline: true)]
ode(universal_newline: true)][row[0], memo_hash[:title].encode(universal_newline: true), memo_hash[:content].enc
[row[0], memo_hash[:title].encode(universal_newline: true), memo_hash[:content].enc
c
csv
memo_hash
c
csv
c
memo_hash
csv
csv.each {}
csv.each
csv
c
csv
c
csv
csv[0]
csv
c
memo_hash
c
csv_table.each {|r| p r[0], r[1], r[2]}
csv_table.each {|r| p r[0]}
csv_table.each {|r| p r}
memo_hash
c
csv_table.each {|r| p r}
csv_table
c
csv_table.to_csv(write_headers: false)
csv_table.each {|r| p r}
c
l
c
csv_table.to_csv(write_headers: false)c
csv_table.to_csv(write_headers: false)
c
csv_table.each {|row|p row}
csv_table
c
row[1]
row[1] = memo_hash[:title].encode(universal_newline: true)
row[1]
row[0]
row
c
row
c
col
col.to_a
col.values_at
col
c
col(:no_header)
col.to_a
col
col.values_at
col.values_at[0] = 123210
col.values_at[0] = "aiueo"
col.values_at[0]
col.values_at
col.values
col.values_at[1] = "aiueo"
col.values_at[1]
col.values_at[1] << memo_hash[:title].encode(universal_newline: true)
col.values_at[1]
co.values_at[1]
col.values_at[1]= memo_hash[:title].encode(universal_newline: true)
col.values_at[1]
memo_hash[:title]
col
c
x
csv_array.each {|c|p c}
c
    end
      end
        col.values_at[2] = memo_hash[:content]
        col.values_at[1] = memo_hash[:title]
      if col.values_at[0] == memo_hash[:uuid]
    csv_array.map do |col|
memo_hash
csv_array.each {|col| p col}
csv_array {|col|p col}
c
memo_hash
csv_array.each {|col| p col}
csv_array {|col|p col}
csv_array
c
col.values_at[1] = memo_hash[:title]
col
q!
c
col
c
col.values_at[0]
col.values_at(0)
col.values_at
col
col.velues_at
col.velues_at(0)
c
col
c
q!
c
col.values_at(0)
col.values_at
col.values
col
c
csv_array.each {|col| p col}
csv_array.each {|col| p col[:]}
csv_array.each {|col| p col}
csv_array.col
csv_array.row
csv_array
c
params
aiu
c
memo_hash
c
memo_hash
c
params
memo_hash
c
memo_hash.each {|memo| p memo[c]}
memo_hash.each {|memo| p memo}
memo_hash
c
@memo_hash
memo_hash
c
memo_hash
c
arr_of_arrs[0][2]
arr_of_arrs[0][1]
arr_of_arrs[0][0]
arr_of_arrs
c
@memo_hash[:title]
@memo_hash
c
@memo
c
@memo
c
@memo.uuid
@memo
c
@memo.uuid
@memo
q!
c
row[0]
row
c
row
c
@memo_title.encode(universal_newline: true)
@memo_title
c
@memo_title
c
CSV.foreach("memo.csv") do |row| end
CSV.foreach("memo.csv") do |row|
c
params[:id]
params
c
@memo
c
@id
@memo
c
@memo.id
@memo
c
@memo
c
@memo_title.gsub(/^[[:space:]]+/, '').empty?
@memo_content
pmemo_content
@memo_title
c
@memo
@memo.id
c
@memo
@memo.id
c
@memo.id
c
params
@memo
c
